# interpreter for shell commands
set shell sh

# Show Icons
set icons

# Show file count in directory
set info size
set dircounts

set drawbox

set previewer ~/.config/lf/previewer.sh
set cleaner ~/.config/lf/cleaner.sh

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

map w $nu

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}
#

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd gotoz ${{
    res="$(zoxide query -- $1)"
    if [ -d "$res" ]; then
        cmd="cd"
    else 
        cmd="select"                                                       
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map gz push :gotoz<space>

cmd gotopaste ${{
    filename="$(wl-paste | head -1)"
    lf -remote "send $id select $filename"
}}
map gp gotopaste

cmd upload_file ${{ 
    url=$(curl -sSL --fail -F "file=@$fx" http://fars.ee | awk '/url/ {print $2}')
    echo $url | xclip -i -selection clipboard
}}
map `u upload_file

cmd fzf_plocate ${{
    res="$(plocate --regex $1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else 
        cmd="select"                                                       
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map F push :fzf_plocate<space>

cmd fzf_jump ${{
    res="$(zoxide query -i -- $1 | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ]; then
        cmd="cd"
    else 
        cmd="select"                                                       
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map f push :fzf_jump<space>

cmd fzf_mount ${{
    target="$(grep -vP '(/systemd| /sys| /dev| /proc)' /proc/mounts | awk '{print $2}' | fzf --reverse --header='Jump to mount point')"
    if [ -d "$target" ]; then
        cmd="cd"
    else 
        cmd="select"
    fi
    lf -remote "send $id $cmd \"$target\""
}}
map gm fzf_mount

cmd trash %trash-put $fx
map <delete> trash

cmd yank-dirname $dirname -- "$f" | head -c-1 | xclip -i -selection clipboard
cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
cmd yank-basename $basename -a -- $fx | head -c-1 | xclip -i -selection clipboard

cmd yank-basename-without-extension ${{
    echo "$fx" |
      xargs -r -d '\n' basename -a |
      awk -e '{
        for (i=length($0); i > 0; i--) {
          if (substr($0, i, 1) == ".") {
            if (i == 1) print $0
            else print substr($0, 0, i-1)

            break
          }
        }

        if (i == 0)
          print $0
      }' |
      if [ -n "$fs" ]; then cat; else tr -d '\n'; fi |
      xclip -i -selection clipboard
}}
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*)
            $EDITOR $fx;;
        application/pdf)
            mupdf -r 120 $fx;;
        *)
            case "$f" in
                *.tar.bz|*.tar.bz2|*.tbz|*.tbz2|*.tar.gz|*.tgz|*.tar.xz|*.txz|*.zip|*.rar|*.iso)
                    mntdir="$f-archivemount"
                    [ ! -d "$mntdir" ] && {
                        mkdir "$mntdir"
                        archivemount "$f" "$mntdir"
                        echo "$mntdir" >> "/tmp/__lf_archivemount_$id"
                    }
                    lf -remote "send $id cd \"$mntdir\""
                    lf -remote "send $id reload"
                    ;;
                *)
                    for f in $fx; do
                        $OPENER $f > /dev/null 2> /dev/null &
                    done;;
            esac
    esac
}}

cmd on-cd ${{
    zoxide add -- "$PWD"
}}

cmd bookmark_jump ${{
    res="$(cat $LF_BOOKMARK_PATH/$(ls $LF_BOOKMARK_PATH | fzf))"
    lf -remote "send $id cd \"$res\""
}}

cmd bookmark_create ${{
    ans="$1"
    if [ ! -d $LF_BOOKMARK_PATH ]
    then
        mkdir -p $(echo $LF_BOOKMARK_PATH | xargs realpath)
    fi
    echo $PWD > $LF_BOOKMARK_PATH/$ans
}}

map gyp yank-path
map gyd yank-dirname
map <enter> :open $fx
