#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
This script performs the following tasks:
1. Checks if the `.secrets` folder exists, and creates one if it doesn't.
2. Generates a passwordless key pair using `ssh-keygen` in the `.secrets` folder with the `ed25519` type.
3. Reads user input in a password-protected manner and saves it to a temporary file.
4. Uses `ansible-vault` with `.secrets/private_key` as the vault password file and the temporary file as input to encrypt and output the encrypted file to `.secrets/passwords.yml`.
5. Deletes the temporary file.
"""

import os
import subprocess
import getpass
import tempfile
import sys
import bcrypt
import yaml


def generate_key_pair(folder_path):
    """
    Generates a passwordless key pair using `ssh-keygen` in the specified folder.

    Args:
        folder_path (str): Path to the folder to store the key pair.

    Returns:
        str: Path to the private key file.
    """
    private_key_file = os.path.join(folder_path, "private_key")
    public_key_file = os.path.join(folder_path, "private_key.pub")

    if not os.path.exists(private_key_file) or not os.path.exists(public_key_file):
        subprocess.run(
            ["ssh-keygen", "-t", "ed25519", "-f", private_key_file, "-N", ""],
            stdout=subprocess.DEVNULL,
        )

    return private_key_file


def encrypt_password(temp_file_path, secrets_folder):
    """
    Uses `ansible-vault` to encrypt the input file using the specified vault password file.

    Args:
        temp_file_path (str): Path to the input temporary file.
        vault_password_file (str): Path to the vault password file.
        encrypted_file_path (str): Path to the output encrypted file.
    """
    vault_password_file = os.path.join(secrets_folder, "private_key")
    encrypted_file_path = os.path.join(secrets_folder, "passwords.yml")

    subprocess.run(
        [
            "ansible-vault",
            "encrypt",
            "--vault-password-file",
            vault_password_file,
            "--output",
            encrypted_file_path,
            temp_file_path,
        ],
        stdout=subprocess.DEVNULL,
    )


def main():
    """
    Main function that executes the script.
    """
    secrets_folder = ".secrets"
    passwords_file = os.path.join(secrets_folder, "passwords.yml")

    # Check if the `.secrets` folder exists, create one if it doesn't
    if not os.path.exists(secrets_folder):
        os.makedirs(secrets_folder)

    # Check if the passwords file already exists
    if os.path.exists(passwords_file):
        print("The passwords file already exists.")
        return

    # Generate a passwordless key pair
    private_key_file = generate_key_pair(secrets_folder)

    # Read user input and save it to a temporary file
    sudo_password = getpass.getpass(prompt="Enter your sudo password: ")
    pin = getpass.getpass(prompt="Enter your PIN for swaylock: ")
    gost_ip = input("Enter your Gost Server address: ")
    gost_port = input("Enter your Gost Server port: ")
    gost_password = getpass.getpass(prompt="Enter your Gost password: ")
    primary_email = input("Enter your primary email address: ")
    secondary_email = input("Enter your secondary email address(split by ';'): ")
    if not secondary_email.endswith(";"):
        secondary_email += ";"
    with tempfile.NamedTemporaryFile(mode="w", delete=False) as temp_file:
        yaml.dump(
            {
                "private_key_file": private_key_file,
                "become_pass": sudo_password,
                "pin": pin,
                "gost_ip": gost_ip,
                "gost_port": gost_port,
                "gost_password": gost_password,
                "primary_email": primary_email,
                "other_email": secondary_email,
            },
            temp_file,
        )
        temp_file_path = temp_file.name

    # Encrypt the temporary file using ansible-vault
    encrypt_password(temp_file_path, secrets_folder)

    # Delete the temporary file
    os.remove(temp_file_path)


if __name__ == "__main__":
    main()
