#!/bin/env python

import socket
import os
import json as js
import subprocess
from pathlib import Path

def format_appid(appid: str):
    # Remove the first part of the appid, which is the protocol
    # (e.g. org.kde.konsole -> konsole)
    ret = ''
    if 'telegram' in appid:
        ret = 'telegram'
    else:
        ret = appid.split(".")[-1]
    return ret[0].upper() + ret[1:]

def get_msg_template(method: str):
    # Create generic message template
    message = {}
    message["method"] = method
    message["data"] = {}
    return message


class WayfireSocket:
    def __init__(self, socket_name):
        self.client = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.client.connect(socket_name)

    def read_exact(self, n):
        response = bytes()
        while n > 0:
            read_this_time = self.client.recv(n)
            if not read_this_time:
                raise Exception("Failed to read anything from the socket!")
            n -= len(read_this_time)
            response += read_this_time

        return response

    def read_message(self):
        rlen = int.from_bytes(self.read_exact(4), byteorder="little")
        response_message = self.read_exact(rlen)
        return js.loads(response_message)

    def send_json(self, msg):
        data = js.dumps(msg).encode('utf8')
        header = len(data).to_bytes(4, byteorder="little")
        self.client.send(header)
        self.client.send(data)
        return self.read_message()

    def get_views(self):
        message = get_msg_template("stipc/list_views")
        return self.send_json(message)

    def set_focus(self, view_id: int):
        message = get_msg_template("window-rules/focus-view")
        message["data"]["id"] = view_id
        return self.send_json(message)


def main():
    addr = os.getenv('WAYFIRE_SOCKET')
    sock = WayfireSocket(addr)
    style_sheet = Path("~/.config/wofi/style-single.css").expanduser()

    windows_map = {}
    for view in sock.get_views():
        if view['layer'] == 'workspace' and view['state']['minimized'] == False:
            index = format_appid(view['app-id']) + ' - ' + view['title']
            windows_map[index] = view['id']
    indexs = "\n".join(windows_map.keys()).encode()

    proc = subprocess.Popen(
        ["wofi", "--style", style_sheet, "-c", "1", "--dmenu"],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE,
        env=os.environ
    )
    window_index = proc.communicate(input=indexs)[0].decode().strip()

    if window_index in windows_map:
        window_id = windows_map[window_index]
        sock.set_focus(window_id)


if __name__ == '__main__':
    main()
